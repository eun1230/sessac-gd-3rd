console.log("connected");

/* 
----------------------------------------------
변수 선언 & 할당
----------------------------------------------
var 키워드 
----------------------------------------------
1. 변수 선언 -> 값 할당
2. 변수 선언과 동시에 값 할당
3. 변수를 동일한 이름으로 재선언할 수 있음
4. 마지막으로 할당된 값이 최종적으로 저장됨 ( 덮어 쓰기 )
5. 변수를 선언하기 전 (데이터타입 없이 선언 가능) 값을 할당할 수 있음
    -> 유지보수 최악 (간단히 할 수 있지만 장점이 아님)
----------------------------------------------
*/
var varName; // undefined로 값 자동할당
varName = "eun";

var varName = "eun2";

console.log(varName);
console.log("varName"); // " " 안의 내용 그대로 출력(문자열로 인식)

varName = "eun3"; //eun2에서 eun3로 변경
console.log(varName); // eun3출력

aa = 1234;
console.log(aa);

/*
----------------------------------------------
let 키워드 
----------------------------------------------
1. 변수 선언 -> 값 할당
2. 변수 선언과 동시에 값 할당
3. 중복선언은 불가능하나 값 재할당 가능
----------------------------------------------
*/
let letName;
letName = "byeol1";
console.log("letName = ", letName);

let letName2 = "byeol2";
console.log("letName2 = ", letName2);

letName2 = "byeol3";
console.log("다시 할당한 letName2 = ", letName2);

/*
----------------------------------------------
const 키워드 
----------------------------------------------
1. 반드시 변수 선언과 동시에 값 할당
2. 변수 재선언, 재할당 불가능
3. 사용처 : 변하지 않는 값을 변수에 저장할 때 사용
----------------------------------------------
*/
// const constName; //'const' declarations must be initialized
const constName = "byeol4";
console.log(constName);


/*
------------------------------------------------------------------------------------------
                                        정리
------------------------------------------------------------------------------------------
1. var : ES6이전에 사용되던 변수 선언 키워드  ( 사용 지양 ) - 재선언 재할당 모두 가능
2. let : 변수 선언 키워드 - 변수 선언 후 값 할당 또는 동시에 값 할당 가능 - 재선언 불가능, 재할당 가능(값 수정)
3. const : 상수 선언 키워드 - 반드시 선언과 동시에 값 할당 - 재선언, 재할당 모두 불가능
------------------------------------------------------------------------------------------
식별자 규칙 (이름 지정시)
1. 키워드 사용 불가능 ( 이미 역할하고 있는 단어 - var, let , const, if, else 등등)
2. 숫자로 시작 불가능
3. 특수문자는 _,$만 사용가능
4. 공백문자 사용 불가능
------------------------------------------------------------------------------------------
*/
